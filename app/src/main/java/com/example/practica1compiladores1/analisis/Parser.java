
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.example.practica1compiladores1.analisis;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import com.example.practica1compiladores1.modelo.Grafico;
import com.example.practica1compiladores1.modelo.GraficoBarras;
import com.example.practica1compiladores1.modelo.GraficoPie;
import com.example.practica1compiladores1.modelo.TipoGrafico;
import com.example.practica1compiladores1.modelo.TipoPie;
import com.example.practica1compiladores1.modelo.Unir;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\141\000\002\002\004\000\002\002\004\000\002\003" +
    "\004\000\002\003\002\000\002\027\002\000\002\004\007" +
    "\000\002\030\002\000\002\004\006\000\002\031\002\000" +
    "\002\004\005\000\002\032\002\000\002\004\006\000\002" +
    "\033\002\000\002\004\007\000\002\005\005\000\002\005" +
    "\003\000\002\034\002\000\002\005\005\000\002\035\002" +
    "\000\002\005\007\000\002\007\005\000\002\007\005\000" +
    "\002\007\005\000\002\007\005\000\002\007\005\000\002" +
    "\007\005\000\002\007\005\000\002\007\005\000\002\007" +
    "\005\000\002\007\005\000\002\007\005\000\002\007\004" +
    "\000\002\007\005\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\010\005\000\002\010" +
    "\005\000\002\011\004\000\002\036\002\000\002\011\006" +
    "\000\002\037\002\000\002\012\006\000\002\012\002\000" +
    "\002\040\002\000\002\012\006\000\002\041\002\000\002" +
    "\012\005\000\002\013\005\000\002\013\005\000\002\014" +
    "\004\000\002\014\004\000\002\015\005\000\002\015\002" +
    "\000\002\042\002\000\002\015\006\000\002\015\004\000" +
    "\002\016\005\000\002\016\005\000\002\017\006\000\002" +
    "\017\006\000\002\017\007\000\002\020\007\000\002\020" +
    "\002\000\002\020\007\000\002\020\006\000\002\020\005" +
    "\000\002\021\005\000\002\022\003\000\002\022\005\000" +
    "\002\023\005\000\002\023\005\000\002\023\005\000\002" +
    "\023\005\000\002\023\005\000\002\023\003\000\002\023" +
    "\003\000\002\024\004\000\002\024\006\000\002\025\006" +
    "\000\002\025\007\000\002\025\006\000\002\043\002\000" +
    "\002\025\006\000\002\044\002\000\002\025\005\000\002" +
    "\026\005\000\002\026\003\000\002\045\002\000\002\026" +
    "\006\000\002\046\002\000\002\026\007\000\002\026\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\316\000\012\003\006\004\004\021\ufffe\033\ufffe\001" +
    "\002\000\004\005\315\001\002\000\012\003\006\004\004" +
    "\021\ufffe\033\ufffe\001\002\000\036\003\ufff9\005\060\006" +
    "\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9\013\ufff9\014\ufff9" +
    "\015\ufff9\016\ufff9\026\057\035\056\036\ufff9\001\002\000" +
    "\004\002\054\001\002\000\006\021\013\033\011\001\002" +
    "\000\004\041\051\001\002\000\004\002\000\001\002\000" +
    "\006\003\014\033\015\001\002\000\014\003\uffa9\026\uffa9" +
    "\033\036\034\035\041\040\001\002\000\004\041\017\001" +
    "\002\000\004\002\uffb0\001\002\000\004\034\020\001\002" +
    "\000\006\003\021\026\023\001\002\000\012\002\uffa1\003" +
    "\uffa3\004\uffa3\021\027\001\002\000\004\002\uffae\001\002" +
    "\000\006\002\uffa6\021\024\001\002\000\006\003\014\033" +
    "\015\001\002\000\004\002\uffa7\001\002\000\006\003\006" +
    "\004\004\001\002\000\006\003\uffa5\033\uffa5\001\002\000" +
    "\006\003\014\033\015\001\002\000\004\002\uffa4\001\002" +
    "\000\012\003\006\004\004\021\ufffe\033\ufffe\001\002\000" +
    "\006\021\013\033\011\001\002\000\004\002\uffa2\001\002" +
    "\000\006\003\uffab\026\uffab\001\002\000\004\041\044\001" +
    "\002\000\006\003\021\026\023\001\002\000\004\034\041" +
    "\001\002\000\006\003\021\026\023\001\002\000\004\002" +
    "\uffac\001\002\000\004\002\uffa8\001\002\000\004\034\045" +
    "\001\002\000\006\003\021\026\023\001\002\000\004\002" +
    "\uffad\001\002\000\006\003\021\026\023\001\002\000\004" +
    "\002\uffaa\001\002\000\004\034\052\001\002\000\006\003" +
    "\021\026\023\001\002\000\004\002\uffaf\001\002\000\004" +
    "\002\001\001\002\000\030\003\076\006\065\007\067\010" +
    "\064\011\077\012\071\013\073\014\070\015\075\016\063" +
    "\036\074\001\002\000\030\003\ufffb\006\ufffb\007\ufffb\010" +
    "\ufffb\011\ufffb\012\ufffb\013\ufffb\014\ufffb\015\ufffb\016\ufffb" +
    "\036\ufffb\001\002\000\030\003\ufff7\006\ufff7\007\ufff7\010" +
    "\ufff7\011\ufff7\012\ufff7\013\ufff7\014\ufff7\015\ufff7\016\ufff7" +
    "\036\ufff7\001\002\000\004\035\061\001\002\000\030\003" +
    "\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5" +
    "\014\ufff5\015\ufff5\016\ufff5\036\ufff5\001\002\000\030\003" +
    "\076\006\065\007\067\010\064\011\077\012\071\013\073" +
    "\014\070\015\075\016\063\036\074\001\002\000\004\025" +
    "\305\001\002\000\004\025\303\001\002\000\004\025\301" +
    "\001\002\000\012\003\ufff4\004\ufff4\021\ufff4\033\ufff4\001" +
    "\002\000\004\025\277\001\002\000\004\025\274\001\002" +
    "\000\004\025\267\001\002\000\004\026\265\001\002\000" +
    "\004\025\260\001\002\000\012\003\ufff2\004\ufff2\021\ufff2" +
    "\033\ufff2\001\002\000\004\025\256\001\002\000\016\003" +
    "\ufff1\004\ufff1\005\133\025\130\026\132\040\131\001\002" +
    "\000\004\025\100\001\002\000\006\003\102\037\103\001" +
    "\002\000\004\026\uffe8\001\002\000\006\003\104\041\106" +
    "\001\002\000\006\003\104\041\106\001\002\000\004\041" +
    "\123\001\002\000\004\040\122\001\002\000\010\003\107" +
    "\024\110\040\uffd2\001\002\000\012\003\uffcf\024\uffcf\040" +
    "\uffcf\041\116\001\002\000\004\041\112\001\002\000\004" +
    "\040\uffd7\001\002\000\010\003\uffd4\024\uffd4\040\uffd4\001" +
    "\002\000\010\003\107\024\110\040\uffd2\001\002\000\004" +
    "\040\uffd3\001\002\000\010\003\107\024\110\040\uffd2\001" +
    "\002\000\010\003\uffd1\024\uffd1\040\uffd1\001\002\000\010" +
    "\003\107\024\110\040\uffd2\001\002\000\004\040\uffd0\001" +
    "\002\000\004\040\uffce\001\002\000\004\026\uffd9\001\002" +
    "\000\010\003\uffd6\024\uffd6\040\uffd6\001\002\000\010\003" +
    "\107\024\110\040\uffd2\001\002\000\004\040\uffd5\001\002" +
    "\000\004\040\127\001\002\000\004\026\uffd8\001\002\000" +
    "\022\003\155\017\151\020\152\033\156\037\142\041\150" +
    "\042\154\043\145\001\002\000\004\026\141\001\002\000" +
    "\004\026\uffe2\001\002\000\004\035\uffef\001\002\000\006" +
    "\003\006\004\004\001\002\000\012\003\ufff0\004\ufff0\021" +
    "\ufff0\033\ufff0\001\002\000\004\035\137\001\002\000\030" +
    "\003\076\006\065\007\067\010\064\011\077\012\071\013" +
    "\073\014\070\015\075\016\063\036\074\001\002\000\012" +
    "\003\uffee\004\uffee\021\uffee\033\uffee\001\002\000\004\026" +
    "\uffe1\001\002\000\016\003\174\033\156\035\172\041\106" +
    "\042\154\043\145\001\002\000\014\026\uffda\027\162\030" +
    "\163\031\161\032\164\001\002\000\004\026\uffdf\001\002" +
    "\000\026\003\uffb1\024\uffb1\026\uffb1\027\uffb1\030\uffb1\031" +
    "\uffb1\032\uffb1\034\uffb1\036\uffb1\040\uffb1\001\002\000\004" +
    "\026\uffdd\001\002\000\004\026\uffe3\001\002\000\004\026" +
    "\uffe0\001\002\000\004\026\uffdc\001\002\000\004\026\uffdb" +
    "\001\002\000\004\026\uffde\001\002\000\026\003\uffb2\024" +
    "\uffb2\026\uffb2\027\uffb2\030\uffb2\031\uffb2\032\uffb2\034\uffb2" +
    "\036\uffb2\040\uffb2\001\002\000\016\003\174\033\156\035" +
    "\172\041\106\042\154\043\145\001\002\000\010\033\156" +
    "\042\154\043\145\001\002\000\014\027\162\030\163\031" +
    "\161\032\164\034\160\001\002\000\026\003\uffb3\024\uffb3" +
    "\026\uffb3\027\uffb3\030\uffb3\031\uffb3\032\uffb3\034\uffb3\036" +
    "\uffb3\040\uffb3\001\002\000\010\033\156\042\154\043\145" +
    "\001\002\000\010\033\156\042\154\043\145\001\002\000" +
    "\010\033\156\042\154\043\145\001\002\000\010\033\156" +
    "\042\154\043\145\001\002\000\026\003\uffb4\024\uffb4\026" +
    "\uffb4\027\uffb4\030\uffb4\031\uffb4\032\uffb4\034\uffb4\036\uffb4" +
    "\040\uffb4\001\002\000\026\003\uffb6\024\uffb6\026\uffb6\027" +
    "\uffb6\030\uffb6\031\161\032\164\034\uffb6\036\uffb6\040\uffb6" +
    "\001\002\000\026\003\uffb7\024\uffb7\026\uffb7\027\uffb7\030" +
    "\uffb7\031\161\032\164\034\uffb7\036\uffb7\040\uffb7\001\002" +
    "\000\026\003\uffb5\024\uffb5\026\uffb5\027\uffb5\030\uffb5\031" +
    "\uffb5\032\uffb5\034\uffb5\036\uffb5\040\uffb5\001\002\000\020" +
    "\003\203\024\204\027\162\030\163\031\161\032\164\040" +
    "\uffc8\001\002\000\010\033\156\042\154\043\145\001\002" +
    "\000\004\040\245\001\002\000\022\003\203\024\204\033" +
    "\156\035\200\040\uffc8\041\123\042\154\043\145\001\002" +
    "\000\004\040\176\001\002\000\004\026\uffc3\001\002\000" +
    "\014\024\237\027\162\030\163\031\161\032\164\001\002" +
    "\000\010\033\156\042\154\043\145\001\002\000\004\040" +
    "\uffca\001\002\000\004\036\213\001\002\000\016\003\203" +
    "\024\204\033\156\040\uffc8\042\154\043\145\001\002\000" +
    "\010\033\156\042\154\043\145\001\002\000\020\003\203" +
    "\024\204\027\162\030\163\031\161\032\164\040\uffc8\001" +
    "\002\000\004\040\uffc9\001\002\000\020\003\uffc7\024\uffc7" +
    "\027\162\030\163\031\161\032\164\040\uffc7\001\002\000" +
    "\004\040\uffc5\001\002\000\010\003\203\024\204\040\uffc8" +
    "\001\002\000\004\040\uffc6\001\002\000\010\003\215\024" +
    "\216\040\uffbe\001\002\000\004\040\uffc1\001\002\000\014" +
    "\033\156\035\225\036\224\042\154\043\145\001\002\000" +
    "\004\035\217\001\002\000\010\033\156\042\154\043\145" +
    "\001\002\000\004\036\221\001\002\000\012\003\215\024" +
    "\216\036\uffbe\040\uffbe\001\002\000\006\036\uffbf\040\uffbf" +
    "\001\002\000\004\036\232\001\002\000\012\003\215\024" +
    "\216\036\uffbe\040\uffbe\001\002\000\010\033\156\042\154" +
    "\043\145\001\002\000\004\036\227\001\002\000\012\003" +
    "\215\024\216\036\uffbe\040\uffbe\001\002\000\006\036\uffbd" +
    "\040\uffbd\001\002\000\006\036\uffbb\040\uffbb\001\002\000" +
    "\012\003\215\024\216\036\uffbe\040\uffbe\001\002\000\006" +
    "\036\uffbc\040\uffbc\001\002\000\004\036\235\001\002\000" +
    "\010\003\215\024\216\040\uffbe\001\002\000\004\040\uffc0" +
    "\001\002\000\012\003\241\033\156\042\154\043\145\001" +
    "\002\000\004\036\uffba\001\002\000\004\036\243\001\002" +
    "\000\014\027\162\030\163\031\161\032\164\036\uffb9\001" +
    "\002\000\010\003\215\024\216\036\uffbe\001\002\000\004" +
    "\036\uffb8\001\002\000\004\026\uffcc\001\002\000\004\036" +
    "\247\001\002\000\010\003\215\024\216\040\uffbe\001\002" +
    "\000\004\040\uffc2\001\002\000\004\040\uffcb\001\002\000" +
    "\004\040\255\001\002\000\004\040\254\001\002\000\004" +
    "\026\uffc4\001\002\000\004\026\uffcd\001\002\000\010\033" +
    "\156\042\154\043\145\001\002\000\014\026\uffe5\027\162" +
    "\030\163\031\161\032\164\001\002\000\006\003\262\037" +
    "\263\001\002\000\004\026\uffe6\001\002\000\006\003\264" +
    "\035\172\001\002\000\006\003\264\035\172\001\002\000" +
    "\012\033\156\035\200\042\154\043\145\001\002\000\030" +
    "\003\076\006\065\007\067\010\064\011\077\012\071\013" +
    "\073\014\070\015\075\016\063\036\074\001\002\000\012" +
    "\003\ufff3\004\ufff3\021\ufff3\033\ufff3\001\002\000\006\003" +
    "\270\037\272\001\002\000\012\003\273\033\156\042\154" +
    "\043\145\001\002\000\004\026\uffe7\001\002\000\012\003" +
    "\273\033\156\042\154\043\145\001\002\000\010\003\203" +
    "\024\204\040\uffc8\001\002\000\006\017\275\020\276\001" +
    "\002\000\004\026\uffec\001\002\000\004\026\uffeb\001\002" +
    "\000\006\003\102\037\103\001\002\000\004\026\uffea\001" +
    "\002\000\004\041\302\001\002\000\004\026\uffed\001\002" +
    "\000\006\003\270\037\272\001\002\000\004\026\uffe9\001" +
    "\002\000\004\041\306\001\002\000\004\026\uffe4\001\002" +
    "\000\030\003\076\006\065\007\067\010\064\011\077\012" +
    "\071\013\073\014\070\015\075\016\063\036\074\001\002" +
    "\000\012\003\ufff6\004\ufff6\021\ufff6\033\ufff6\001\002\000" +
    "\030\003\076\006\065\007\067\010\064\011\077\012\071" +
    "\013\073\014\070\015\075\016\063\036\074\001\002\000" +
    "\012\003\ufffa\004\ufffa\021\ufffa\033\ufffa\001\002\000\012" +
    "\003\ufff8\004\ufff8\021\ufff8\033\ufff8\001\002\000\006\021" +
    "\uffff\033\uffff\001\002\000\004\035\316\001\002\000\030" +
    "\003\ufffd\006\ufffd\007\ufffd\010\ufffd\011\ufffd\012\ufffd\013" +
    "\ufffd\014\ufffd\015\ufffd\016\ufffd\036\ufffd\001\002\000\030" +
    "\003\076\006\065\007\067\010\064\011\077\012\071\013" +
    "\073\014\070\015\075\016\063\036\074\001\002\000\012" +
    "\003\ufffc\004\ufffc\021\ufffc\033\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\316\000\010\002\006\003\007\004\004\001\001\000" +
    "\002\001\001\000\006\003\313\004\004\001\001\000\004" +
    "\031\054\001\001\000\002\001\001\000\004\024\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\025\015" +
    "\001\001\000\004\044\036\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\026\021\001\001" +
    "\000\004\046\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\025\024\001\001\000\002\001\001\000\004" +
    "\004\031\001\001\000\004\045\027\001\001\000\004\025" +
    "\030\001\001\000\002\001\001\000\006\003\032\004\004" +
    "\001\001\000\004\024\033\001\001\000\002\001\001\000" +
    "\004\043\046\001\001\000\002\001\001\000\004\026\042" +
    "\001\001\000\002\001\001\000\004\026\041\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\026\045\001\001\000\002\001\001\000\004\026\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\026\052" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\312\007\071\001\001\000\004\030\310\001\001\000\004" +
    "\032\306\001\001\000\002\001\001\000\004\033\061\001" +
    "\001\000\006\005\065\007\071\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\034\133\001\001\000\002\001\001\000\004" +
    "\010\100\001\001\000\002\001\001\000\004\011\125\001" +
    "\001\000\004\011\104\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\110\001\001\000\004\041\114\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\037\112" +
    "\001\001\000\004\012\113\001\001\000\002\001\001\000" +
    "\004\012\120\001\001\000\004\040\116\001\001\000\004" +
    "\012\117\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\036\123\001\001\000\004\012\124" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\006\146\010\143\013\152\016\145\023\142" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\035" +
    "\135\001\001\000\004\004\134\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\137\007\071\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\011\104\014\251" +
    "\017\252\023\170\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\011\125\014\172" +
    "\017\174\023\170\001\001\000\004\023\156\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\167\001\001" +
    "\000\004\023\166\001\001\000\004\023\165\001\001\000" +
    "\004\023\164\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\250\001" +
    "\001\000\006\021\245\023\176\001\001\000\002\001\001" +
    "\000\010\015\200\021\201\023\176\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\021\233" +
    "\023\176\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\015\207\023\206\001\001\000\004\023\204\001\001" +
    "\000\004\015\205\001\001\000\002\001\001\000\004\042" +
    "\210\001\001\000\002\001\001\000\004\015\211\001\001" +
    "\000\002\001\001\000\004\020\213\001\001\000\002\001" +
    "\001\000\006\021\222\023\176\001\001\000\002\001\001" +
    "\000\006\021\217\023\176\001\001\000\002\001\001\000" +
    "\004\020\221\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\230\001\001\000\006\021\225\023\176\001" +
    "\001\000\002\001\001\000\004\020\227\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\232\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\235\001\001" +
    "\000\002\001\001\000\006\022\237\023\241\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\243\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\247\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\256\001\001" +
    "\000\002\001\001\000\004\016\260\001\001\000\002\001" +
    "\001\000\004\017\174\001\001\000\004\017\252\001\001" +
    "\000\006\021\201\023\176\001\001\000\006\005\265\007" +
    "\071\001\001\000\002\001\001\000\004\013\270\001\001" +
    "\000\006\014\172\023\170\001\001\000\002\001\001\000" +
    "\006\014\251\023\170\001\001\000\004\015\200\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\277\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\303\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\307" +
    "\007\071\001\001\000\002\001\001\000\006\005\311\007" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\027\316\001\001\000" +
    "\006\005\317\007\071\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;

    public void syntax_error(Symbol s){
        this.s = s;
    }
    
    public void unrecovered_syntax_error(Symbol s){
        this.s = s;
        agregarError("Error Fatal. No se pudo recuperar del error encontrado");
    }

    public Symbol getS(){
        return this.s;
    }

    private ArrayList<OperadorEncontrado> listaOperacionesAritmeticas = new ArrayList<>();
    public ArrayList<OperadorEncontrado> getListaOperaciones(){
        return listaOperacionesAritmeticas;
    }

    private ArrayList<CompilerError> errores = new ArrayList<>();
    public void setErrores(ArrayList<CompilerError> errores){
        this.errores = errores;
    }
    public ArrayList<CompilerError> getErrores(){
        return errores;
    }

    public void agregarError(String mensajeError){
        if (s.value == null) {
            errores.add(new CompilerError("EOF", new int[]{s.right,s.left}, TipoError.Sintactico, mensajeError));
        } else {
            errores.add(new CompilerError(s.value.toString(), new int[]{s.right,s.left}, TipoError.Sintactico, mensajeError));
        }
    }

    public void agregarError(String mensajeError, String simbolo){
        errores.add(new CompilerError(simbolo, new int[]{s.right,s.left}, TipoError.Sintactico, mensajeError));
    }


    private ArrayList<Grafico> graficasDefinidas = new ArrayList<>();

    private GraficoBarras graficaBarrasActual = null;
    private GraficoPie graficaPieActual = null;

    private TipoGrafico tipoGraficoActual = null;
    private String tituloActual = null;
    private ArrayList<String> ejeXActual = null;
    private ArrayList<Float> ejeYActual = null;
    private ArrayList<String> etiquetasActuales = null;
    private ArrayList<Float> valoresActuales = null;
    private ArrayList<float[]> tuplasActuales = null;
    private TipoPie tipoPieActual = null;
    private Float totalActual = null;
    private String extraActual = null;


    public ArrayList<Grafico> getGraficasDefinidas(){
        return graficasDefinidas;
    }

    private String cortarCadena(String cadena){
        return cadena.substring(1, cadena.length()-1);
    }

    private void resetAtributosActuales(){
        graficaBarrasActual = null;
        graficaPieActual = null;
        tipoGraficoActual = null;
        tituloActual = null;
        ejeXActual = null;
        ejeYActual = null;
        etiquetasActuales = null;
        valoresActuales = null;
        tuplasActuales = null;
        tipoPieActual = null;
        totalActual = null;
        extraActual = null;
    }

    private void definirGrafico(){
        if (tipoGraficoActual == TipoGrafico.Barras){
            graficaBarrasActual = new GraficoBarras(
                TipoGrafico.Barras,
                tituloActual,
                new Unir(tuplasActuales),
                ejeXActual,
                ejeYActual
            );
            graficasDefinidas.add(graficaBarrasActual);
            resetAtributosActuales();
        } else if (tipoGraficoActual == TipoGrafico.Pie) {
            graficaPieActual = new GraficoPie(
                TipoGrafico.Pie,
                tituloActual,
                new Unir(tuplasActuales),
                etiquetasActuales,
                valoresActuales,
                tipoPieActual,
                totalActual,
                extraActual
            );
            graficasDefinidas.add(graficaPieActual);
            resetAtributosActuales();
        } else {
            //agregarError("Tipo de grafico no definido");
            resetAtributosActuales();
        }
    }

    private void imprimirGraficas(){
        for(Grafico grafica: graficasDefinidas){
            if(grafica instanceof GraficoBarras){
                System.out.println("Grafico barras");
                System.out.println("Titulo:");
                System.out.println(grafica.getTitulo()==null? "null":grafica.getTitulo());
                System.out.println("Unir:");
                System.out.println(grafica.getUnir() == null? "null":grafica.getUnir().toString());
                System.out.println("EjeX:");
                System.out.println(((GraficoBarras) grafica).getEjeX()==null? "null":((GraficoBarras) grafica).getEjeX().toString());
                System.out.println("EjeY:");
                System.out.println(((GraficoBarras) grafica).getEjeY()==null? "null":((GraficoBarras) grafica).getEjeY().toString());
                System.out.println();
            } else if(grafica instanceof GraficoPie){
                System.out.println("Grafico pie");
                System.out.println("Titulo:");
                System.out.println(grafica.getTitulo()==null? "null":grafica.getTitulo());
                System.out.println("Unir:");
                System.out.println(grafica.getUnir()==null? "null":grafica.getUnir().toString());
                System.out.println("Etiquetas:");
                System.out.println(((GraficoPie) grafica).getEtiquetas()==null? "null":((GraficoPie) grafica).getEtiquetas().toString());
                System.out.println("Valores:");
                System.out.println(((GraficoPie) grafica).getValores()==null? "null":((GraficoPie) grafica).getValores().toString());
                System.out.println("Tipo Pie:");
                System.out.println(((GraficoPie) grafica).getTipoPie()==null? "null":((GraficoPie) grafica).getTipoPie().toString());
                System.out.println("Total:");
                System.out.println(((GraficoPie) grafica).getTotal()==null? "null":((GraficoPie) grafica).getTotal().toString());
                System.out.println("Extra:");
                System.out.println(((GraficoPie) grafica).getExtra()==null? "null":((GraficoPie) grafica).getExtra().toString());
                System.out.println();
            }
        }
    }

    private void imprimirEjecuciones(){
        for(String ejecucion: ejecucionesGraficos){
            System.out.println(ejecucion);
        }
    }

    private ArrayList<String> listaCadenasActual = new ArrayList<>();
    private ArrayList<Float> listaNumerosActual = new ArrayList<>();
    private ArrayList<float[]> listaTuplasActual = new ArrayList<>();
    private float[] tuplaActual = new float[2];

    private ArrayList<String> ejecucionesGraficos = new ArrayList<>();

    public ArrayList<String> getEjecucionesGraficos(){
        return ejecucionesGraficos;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= DEFINICIONES EJECUCION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DEFINICIONES ::= DEFINICION DEFINICIONES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEFINICIONES",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DEFINICIONES ::= 
            {
              Object RESULT =null;
		System.out.println("Todas las definiciones realizadas");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEFINICIONES",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$0 ::= 
            {
              Object RESULT =null;
		int tipoGraficaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tipoGraficaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object tipoGrafica = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

                    System.out.println("Grafica definida. Tipo "+tipoGrafica);
                    tipoGraficoActual = TipoGrafico.valueOf(tipoGrafica.toString());
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DEFINICION ::= P_R_Def P_R_TipoGrafico Llave_Izq NT$0 ATRIBUTOS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tipoGraficaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tipoGraficaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object tipoGrafica = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
                    System.out.println("Definicion Terminada, Atributos definidos correctamente");
                    definirGrafico();
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEFINICION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$1 ::= 
            {
              Object RESULT =null;

        agregarError("Definicion incorrecta, se esperaba tipo de grafico");
        System.out.println("Error tipo grafico");
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DEFINICION ::= error Llave_Izq NT$1 ATRIBUTOS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        System.out.println("Definicion Terminada, Atributos definidos correctamente");
        definirGrafico();
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEFINICION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$2 ::= 
            {
              Object RESULT =null;

            agregarError("Se esperaba {");
            System.out.println("Error {");
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DEFINICION ::= error NT$2 ATRIBUTOS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            System.out.println("Definicion Terminada, Atributos definidos correctamente");
            definirGrafico();
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEFINICION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$3 ::= 
            {
              Object RESULT =null;

        agregarError("Definicion incorrecta de atributo");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DEFINICION ::= error Sim_PComa NT$3 ATRIBUTOS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        System.out.println("Definicion Terminada, Atributos definidos correctamente");
        definirGrafico();
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEFINICION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$4 ::= 
            {
              Object RESULT =null;
		int tipoGraficaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tipoGraficaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object tipoGrafica = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

            agregarError("Definicion incorrecta, se esperaba \'Def\' o \'def\'");
            System.out.println("Grafica definida. Tipo "+tipoGrafica);
            tipoGraficoActual = TipoGrafico.valueOf(tipoGrafica.toString());
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$4",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DEFINICION ::= error P_R_TipoGrafico Llave_Izq NT$4 ATRIBUTOS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tipoGraficaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tipoGraficaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object tipoGrafica = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
            System.out.println("Grafica definida. Tipo "+tipoGrafica);

            if (tipoGraficoActual != null) {
                agregarError("Se had declarado mas de una vez el atributo de tipo de graficos");
            } else {
                tipoGraficoActual = TipoGrafico.valueOf(tipoGrafica.toString());
            }
            definirGrafico();
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEFINICION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ATRIBUTOS ::= DECLARACION_ATRIBUTO Sim_PComa ATRIBUTOS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ATRIBUTOS ::= Llave_Der 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$5 ::= 
            {
              Object RESULT =null;

                System.out.println(tipoGraficoActual);
                System.out.println("Definicion Terminada, Atributos definidos correctamente");
                agregarError("Se esperaba }");
                definirGrafico();
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$5",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ATRIBUTOS ::= error NT$5 DEFINICION 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$6 ::= 
            {
              Object RESULT =null;
		int tGleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tGright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tG = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

            agregarError("Definicion incorrecta, se esperaba \'Def\' o \'def\'");
            System.out.println("Definicion Iniciada:\n"+"Tipo: \n-"+tG+"\nAtributos:");
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$6",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ATRIBUTOS ::= error P_R_TipoGrafico NT$6 Llave_Izq ATRIBUTOS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tGleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tGright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object tG = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION_ATRIBUTO ::= P_R_Titulo Sim_DPuntos Cadena 
            {
              Object RESULT =null;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object titulo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        System.out.println("-Titulo: "+titulo);
                        if (tituloActual != null) {
                            agregarError("Se had declarado mas de una vez el atributo de titulo");
                        } else {
                            tituloActual = cortarCadena(titulo.toString());
                        }
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_ATRIBUTO",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION_ATRIBUTO ::= P_R_Tipo Sim_DPuntos T_G_Cantidad 
            {
              Object RESULT =null;
		
                    System.out.println("-Tipo: Cantidad");
                    if (tipoPieActual != null) {
                        agregarError("Se had declarado mas de una vez el atributo de tipo de pie");
                    } else {
                        tipoPieActual = TipoPie.valueOf("Cantidad");
                    }
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_ATRIBUTO",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION_ATRIBUTO ::= P_R_Tipo Sim_DPuntos T_G_Porcentajes 
            {
              Object RESULT =null;
		
                    System.out.println("-Tipo: Porcentaje");
                    if (tipoPieActual != null) {
                        agregarError("Se had declarado mas de una vez el atributo de tipo de pie");
                    } else {
                        tipoPieActual = TipoPie.valueOf("Porcentaje");
                    }
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_ATRIBUTO",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION_ATRIBUTO ::= P_R_EjeX Sim_DPuntos LISTA_CADENAS 
            {
              Object RESULT =null;
		System.out.println("-EjeX:");
                        for(String cadena:listaCadenasActual){System.out.print(cadena+" ");}
                        System.out.println();
                        if (ejeXActual != null) {
                            agregarError("Se had declarado mas de una vez el atributo de Eje X");
                        } else {
                            ejeXActual = listaCadenasActual;
                        }
                        listaCadenasActual=new ArrayList<>();
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_ATRIBUTO",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION_ATRIBUTO ::= P_R_EjeY Sim_DPuntos LISTA_NUMEROS 
            {
              Object RESULT =null;
		System.out.println("-EjeY:");
                        for(Float numero:listaNumerosActual){System.out.print(numero+" ");}
                        System.out.println();
                        if (ejeYActual != null) {
                            agregarError("Se had declarado mas de una vez el atributo de Eje Y");
                        } else {
                            ejeYActual = listaNumerosActual;
                        }
                        listaNumerosActual=new ArrayList<>();
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_ATRIBUTO",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION_ATRIBUTO ::= P_R_Etiquetas Sim_DPuntos LISTA_CADENAS 
            {
              Object RESULT =null;
		System.out.println("-Etiquetas:");
                        for(String cadena:listaCadenasActual){System.out.print(cadena+" ");}
                        System.out.println();
                        if (etiquetasActuales != null) {
                            agregarError("Se had declarado mas de una vez el atributo de Etiquetas");
                        } else {
                            etiquetasActuales = listaCadenasActual;
                        }
                        listaCadenasActual=new ArrayList<>();
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_ATRIBUTO",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION_ATRIBUTO ::= P_R_Valores Sim_DPuntos LISTA_NUMEROS 
            {
              Object RESULT =null;
		System.out.println("-Valores:");
                        for(Float numero:listaNumerosActual){System.out.print(numero+" ");}
                        System.out.println();
                        if (valoresActuales != null) {
                            agregarError("Se had declarado mas de una vez el atributo de Valores");
                        } else {
                            valoresActuales = listaNumerosActual;
                        }
                        listaNumerosActual=new ArrayList<>();
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_ATRIBUTO",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION_ATRIBUTO ::= P_R_Unir Sim_DPuntos LISTA_TUPLAS 
            {
              Object RESULT =null;
		System.out.println("-Unir:");
                        for(float[] tupla:listaTuplasActual){System.out.print("("+tupla[0]+" "+tupla[1]+"}");}
                        System.out.println();
                        if (tuplasActuales != null) {
                            agregarError("Se had declarado mas de una vez el atributo de Unir");
                        } else {
                            tuplasActuales = listaTuplasActual;
                        }
                        listaTuplasActual=new ArrayList<>();
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_ATRIBUTO",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION_ATRIBUTO ::= P_R_Total Sim_DPuntos EXPRESION_MATEMATICA 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    System.out.println("-Total:");
                    if (totalActual != null) {
                        agregarError("Se had declarado mas de una vez el atributo de Total");
                    } else {
                        totalActual = Float.parseFloat(exp.toString());
                    }
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_ATRIBUTO",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION_ATRIBUTO ::= P_R_Extra Sim_DPuntos Cadena 
            {
              Object RESULT =null;
		int extraleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int extraright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object extra = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    System.out.println("-Extra: "+extra);
                    if (extraActual != null) {
                        agregarError("Se had declarado mas de una vez el atributo de Extra");
                    } else {
                        extraActual = cortarCadena(extra.toString());
                    }
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_ATRIBUTO",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION_ATRIBUTO ::= error Sim_DPuntos RECUPERACION_VALOR_ATRIBUTO 
            {
              Object RESULT =null;
		
                    agregarError("Tipo de atributo invalido o no definido");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_ATRIBUTO",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION_ATRIBUTO ::= error Sim_PComa 
            {
              Object RESULT =null;
		
                    agregarError("Definicion incorrecta de atributo");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_ATRIBUTO",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACION_ATRIBUTO ::= error Corch_Der Sim_PComa 
            {
              Object RESULT =null;
		
                    agregarError("Lista mal definida");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_ATRIBUTO",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // RECUPERACION_VALOR_ATRIBUTO ::= Cadena 
            {
              Object RESULT =null;
		int textoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int textoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object texto = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("-Texto: "+texto);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RECUPERACION_VALOR_ATRIBUTO",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // RECUPERACION_VALOR_ATRIBUTO ::= LISTA_CADENAS 
            {
              Object RESULT =null;
		System.out.println("-Lista Cadenas: ");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RECUPERACION_VALOR_ATRIBUTO",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // RECUPERACION_VALOR_ATRIBUTO ::= LISTA_NUMEROS 
            {
              Object RESULT =null;
		System.out.println("-Lista Numeros: ");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RECUPERACION_VALOR_ATRIBUTO",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // RECUPERACION_VALOR_ATRIBUTO ::= LISTA_TUPLAS 
            {
              Object RESULT =null;
		System.out.println("-Lista Tuplas:");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RECUPERACION_VALOR_ATRIBUTO",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // RECUPERACION_VALOR_ATRIBUTO ::= T_G_Cantidad 
            {
              Object RESULT =null;
		System.out.println("-Tipo: Cantidad");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RECUPERACION_VALOR_ATRIBUTO",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // RECUPERACION_VALOR_ATRIBUTO ::= T_G_Porcentajes 
            {
              Object RESULT =null;
		System.out.println("-Tipo: Porcetaje");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RECUPERACION_VALOR_ATRIBUTO",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // RECUPERACION_VALOR_ATRIBUTO ::= EXPRESION_MATEMATICA 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("-Matematica: "+Float.parseFloat(exp.toString()));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RECUPERACION_VALOR_ATRIBUTO",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // LISTA_CADENAS ::= Corch_Izq CADENAS Corch_Der 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_CADENAS",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // LISTA_CADENAS ::= error CADENAS Corch_Der 
            {
              Object RESULT =null;
		
                agregarError("Se esperaba [");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_CADENAS",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CADENAS ::= Cadena CADENASD 
            {
              Object RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object cadena = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		listaCadenasActual.add(0, cortarCadena(cadena.toString()));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CADENAS",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$7 ::= 
            {
              Object RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object cadena = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

            agregarError("Se esperaba Cadena, o un atributo no fue definido correctamente");
            listaCadenasActual.add(cortarCadena(cadena.toString()));
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$7",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CADENAS ::= error Cadena NT$7 CADENASD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object cadena = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CADENAS",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$8 ::= 
            {
              Object RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object cadena = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
listaCadenasActual.add(cortarCadena(cadena.toString()));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$8",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CADENASD ::= Sim_Coma Cadena NT$8 CADENASD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object cadena = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CADENASD",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CADENASD ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CADENASD",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$9 ::= 
            {
              Object RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object cadena = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

            agregarError("Se esperaba Coma");
            listaCadenasActual.add(cortarCadena(cadena.toString()));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$9",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CADENASD ::= error Cadena NT$9 CADENASD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object cadena = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CADENASD",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$10 ::= 
            {
              Object RESULT =null;

            agregarError("Se esperaba Cadena");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$10",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CADENASD ::= error NT$10 CADENASD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CADENASD",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // LISTA_NUMEROS ::= Corch_Izq NUMEROS Corch_Der 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_NUMEROS",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // LISTA_NUMEROS ::= error NUMEROS Corch_Der 
            {
              Object RESULT =null;
		
                agregarError("Se esperaba [");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_NUMEROS",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NUMEROS ::= EXPRESION_MATEMATICA NUMEROSD 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = Float.parseFloat(exp.toString());listaNumerosActual.add(0,Float.parseFloat(RESULT.toString()));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NUMEROS",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NUMEROS ::= error NUMEROSD 
            {
              Object RESULT =null;
		
            agregarError("Se esperaba Numero, o un atributo no fue definido correctamente");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NUMEROS",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NUMEROSD ::= Sim_Coma EXPRESION_MATEMATICA NUMEROSD 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = Float.parseFloat(exp.toString());listaNumerosActual.add(Float.parseFloat(RESULT.toString()));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NUMEROSD",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NUMEROSD ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NUMEROSD",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // NT$11 ::= 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

            agregarError("Se esperaba Coma");
            RESULT = Float.parseFloat(exp.toString());
            listaNumerosActual.add(Float.parseFloat(RESULT.toString()));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$11",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NUMEROSD ::= error EXPRESION_MATEMATICA NT$11 NUMEROSD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NUMEROSD",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NUMEROSD ::= error NUMEROSD 
            {
              Object RESULT =null;
		
            agregarError("Se esperaba Numero");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NUMEROSD",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // LISTA_TUPLAS ::= Corch_Izq TUPLAS Corch_Der 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_TUPLAS",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // LISTA_TUPLAS ::= error TUPLAS Corch_Der 
            {
              Object RESULT =null;
		
                agregarError("Se esperaba [");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_TUPLAS",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // TUPLAS ::= Llave_Izq TUPLA Llave_Der TUPLASD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TUPLAS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // TUPLAS ::= error TUPLA Llave_Der TUPLASD 
            {
              Object RESULT =null;
		
            agregarError("Se esperaba {");
            System.out.println("Error en tupla");
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TUPLAS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // TUPLAS ::= error Llave_Izq TUPLA Llave_Der TUPLASD 
            {
              Object RESULT =null;
		
            agregarError("Se esperaba Tupla");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TUPLAS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // TUPLASD ::= Sim_Coma Llave_Izq TUPLA Llave_Der TUPLASD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TUPLASD",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // TUPLASD ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TUPLASD",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // TUPLASD ::= error Llave_Izq TUPLA Llave_Der TUPLASD 
            {
              Object RESULT =null;
		
        agregarError("Se esperaba una Coma");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TUPLASD",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // TUPLASD ::= error TUPLA Llave_Der TUPLASD 
            {
              Object RESULT =null;
		
        agregarError("Se esperaba una {");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TUPLASD",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // TUPLASD ::= error Llave_Der TUPLASD 
            {
              Object RESULT =null;
		
        agregarError("Se definio incorrectamente la tupla");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TUPLASD",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // TUPLA ::= EXPRESION_MATEMATICA Sim_Coma TUPLAD 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = Float.parseFloat(exp.toString());
        tuplaActual[0] = Float.parseFloat(RESULT.toString());
        listaTuplasActual.add(tuplaActual);
        tuplaActual = new float[2];
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TUPLA",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // TUPLAD ::= EXPRESION_MATEMATICA 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = Float.parseFloat(exp.toString());tuplaActual[1] = Float.parseFloat(RESULT.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TUPLAD",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // TUPLAD ::= error Llave_Der TUPLASD 
            {
              Object RESULT =null;
		
        agregarError("Se esperaba una Expresion Matematica");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TUPLAD",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXPRESION_MATEMATICA ::= EXPRESION_MATEMATICA Oper_Suma EXPRESION_MATEMATICA 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object operador = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = Float.parseFloat(exp1.toString())+Float.parseFloat(exp2.toString());
                        System.out.print(exp1+"+"+exp2);
                        listaOperacionesAritmeticas.add(new OperadorEncontrado("Suma", new int[]{operadorright,operadorleft}, exp1.toString()+"+"+exp2.toString()));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_MATEMATICA",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXPRESION_MATEMATICA ::= EXPRESION_MATEMATICA Oper_Resta EXPRESION_MATEMATICA 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object operador = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = Float.parseFloat(exp1.toString())-Float.parseFloat(exp2.toString());
                        System.out.print(exp1+"-"+exp2);
                        listaOperacionesAritmeticas.add(new OperadorEncontrado("Resta", new int[]{operadorright,operadorleft}, exp1.toString()+"-"+exp2.toString()));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_MATEMATICA",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXPRESION_MATEMATICA ::= EXPRESION_MATEMATICA Oper_Multi EXPRESION_MATEMATICA 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object operador = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = Float.parseFloat(exp1.toString())*Float.parseFloat(exp2.toString());
                        System.out.print(exp1+"*"+exp2);
                        listaOperacionesAritmeticas.add(new OperadorEncontrado("Multiplicacion", new int[]{operadorright,operadorleft}, exp1.toString()+"*"+exp2.toString()));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_MATEMATICA",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXPRESION_MATEMATICA ::= EXPRESION_MATEMATICA Oper_Div EXPRESION_MATEMATICA 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object operador = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = Float.parseFloat(exp1.toString())/Float.parseFloat(exp2.toString());
                        System.out.print(exp1+"/"+exp2);
                        listaOperacionesAritmeticas.add(new OperadorEncontrado("Division", new int[]{operadorright,operadorleft}, exp1.toString()+"/"+exp2.toString()));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_MATEMATICA",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXPRESION_MATEMATICA ::= Par_Izq EXPRESION_MATEMATICA Par_Der 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		System.out.print("("+exp+")");RESULT = Float.parseFloat(exp.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_MATEMATICA",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXPRESION_MATEMATICA ::= Entero 
            {
              Object RESULT =null;
		int enteroleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int enteroright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object entero = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = Float.parseFloat(entero.toString());System.out.print(RESULT+" ");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_MATEMATICA",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXPRESION_MATEMATICA ::= Decimal 
            {
              Object RESULT =null;
		int decimalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int decimalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object decimal = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = Float.parseFloat(decimal.toString());System.out.print(RESULT+" ");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_MATEMATICA",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EJECUCION ::= P_R_Ejecutar EJECUCIOND 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EJECUCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EJECUCION ::= Par_Izq Cadena Par_Der EJECUCIONDD 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int graficaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int graficaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object grafica = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
            errores.add(new CompilerError("(",new int[]{tokenright,tokenleft},TipoError.Sintactico,"Se esperaba la palabra reservada Ejecutar"));
            ejecucionesGraficos.add(cortarCadena(grafica.toString()));
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EJECUCION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EJECUCIOND ::= Par_Izq Cadena Par_Der EJECUCIONDD 
            {
              Object RESULT =null;
		int graficaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int graficaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object grafica = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		ejecucionesGraficos.add(cortarCadena(grafica.toString()));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EJECUCIOND",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EJECUCIOND ::= error Par_Izq Cadena Par_Der EJECUCIONDD 
            {
              Object RESULT =null;
		int graficaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int graficaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object grafica = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
            agregarError("Se esperaba palabra reservada Ejecutar");
            ejecucionesGraficos.add(cortarCadena(grafica.toString()));
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EJECUCIOND",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EJECUCIOND ::= error Cadena Par_Der EJECUCIONDD 
            {
              Object RESULT =null;
		
            agregarError("Se esperaba (");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EJECUCIOND",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // NT$12 ::= 
            {
              Object RESULT =null;

            agregarError("Se esperaba Cadena");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$12",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EJECUCIOND ::= error Par_Der NT$12 EJECUCIONDD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EJECUCIOND",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // NT$13 ::= 
            {
              Object RESULT =null;

            agregarError("Comando Ejecutar mal definido");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$13",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EJECUCIOND ::= error NT$13 EJECUCIONDD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EJECUCIOND",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EJECUCIONDD ::= Sim_PComa P_R_Ejecutar EJECUCIOND 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EJECUCIONDD",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EJECUCIONDD ::= Sim_PComa 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EJECUCIONDD",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // NT$14 ::= 
            {
              Object RESULT =null;

            agregarError("Se esperaba ;");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$14",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EJECUCIONDD ::= error P_R_Ejecutar NT$14 EJECUCIOND 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EJECUCIONDD",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // NT$15 ::= 
            {
              Object RESULT =null;
agregarError("Solo se pueden ejecutar graficas al final del archivo");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$15",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EJECUCIONDD ::= error NT$15 DEFINICION DEFINICIONES EJECUCION 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EJECUCIONDD",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EJECUCIONDD ::= error 
            {
              Object RESULT =null;
		
            agregarError("Se esperaba ;");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EJECUCIONDD",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
